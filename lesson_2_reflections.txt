What happens when you initialize a repository? Why do you need to do it?

Git stores metadata containing history of changes made to each tracked file in the git repo. This is contained within a hidden directory .git. When creating a new repository we run git init to generate these files

*************************************************************************************************************************************************************
How is the staging area different from the working directory and the repository?
What value do you think it offers?

Staging area acts as a buffer to collect all minor changes until they grow enough to be grouped under a meaningful and logical commit.

*************************************************************************************************************************************************************
How can you use the staging area to make sure you have one commit per logical
change?

The incremental chnages can be staged as when complete. These chages can then be commited when they are logically meanigful
*************************************************************************************************************************************************************
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches can help when an experimental or not finalised code change or feature is to be implemented while still keeping the original version intact and evolving on its on

branching is like context switching.
Each major work demands a branch on its own!


Usually a master brach is a branch that contains production code which never breaks always works!
All new developmental activities are carried out on the develop branch
An experimental branch is used to ru some experimantal code changes
A bug fix can be taken as a separate branch
A feature brach when a new feature which could be buggy is released

Branches also helps in context switching and compartmentalising work

*************************************************************************************************************************************************************
How do the diagrams help you visualize the branch structure?

 - Diagrams help visualize at which specific point in the commit history does two branches beanch-out.
 - Also, it helps in identifying the parent to each commit.
 - Also the non-reachable commits from a given commit can be easily visualized using diagrams


*************************************************************************************************************************************************************
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When two branches are merged together, the checked out branch gets updated with the changes made in the merged brach as well. The head of the checked out brach now points to the latest among the commits made to the merged branches.

*************************************************************************************************************************************************************
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

*************************************************************************************************************************************************************
git diff forms:

git diff                 : changes between working directory and staging area
git diff --staged        : changes between staging area and last commit in the repo
git diff commit1 commit2 : changes between commit 1 and commit 2 in the git repo